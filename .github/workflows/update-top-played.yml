require('dotenv').config();
const express = require('express');
const axios = require('axios');

const app = express();

// ------------------------
// ✅ CONFIG
// ------------------------
const clientId = process.env.SPOTIFY_CLIENT_ID;
const clientSecret = process.env.SPOTIFY_CLIENT_SECRET;
const refreshToken = process.env.SPOTIFY_REFRESH_TOKEN;
const redirectUri = 'https://yye-spotify.onrender.com/callback';

// ------------------------
// ✅ GET ACCESS TOKEN USING REFRESH TOKEN
// ------------------------
async function getAccessToken() {
  const response = await axios.post(
    'https://accounts.spotify.com/api/token',
    new URLSearchParams({
      grant_type: 'refresh_token',
      refresh_token: refreshToken,
    }).toString(),
    {
      headers: {
        'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64'),
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    }
  );
  return response.data.access_token;
}

// ------------------------
// ✅ SPOTIFY OAUTH CALLBACK
// ------------------------
app.get('/callback', async (req, res) => {
  const code = req.query.code || null;

  if (!code) {
    return res.status(400).send('No code found in query');
  }

  try {
    const response = await axios({
      method: 'post',
      url: 'https://accounts.spotify.com/api/token',
      headers: {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64'),
      },
      data: new URLSearchParams({
        grant_type: 'authorization_code',
        code: code,
        redirect_uri: redirectUri,
      }).toString(),
    });

    const { access_token, refresh_token, expires_in } = response.data;

    res.send(`
      <h2>Spotify tokens received!</h2>
      <p><strong>Access Token:</strong> ${access_token}</p>
      <p><strong>Refresh Token:</strong> ${refresh_token}</p>
      <p><strong>Expires In:</strong> ${expires_in} seconds</p>
      <p>✅ Save your refresh token securely as an environment variable!</p>
    `);

  } catch (error) {
    console.error('Error getting tokens:', error.response?.data || error.message);
    res.status(500).send('Failed to get tokens from Spotify.');
  }
});

// ------------------------
// ✅ API ENDPOINT - GET TOP TRACKS
// ------------------------
app.get('/api/top-played', async (req, res) => {
  try {
    const accessToken = await getAccessToken();
    const { data } = await axios.get(
      'https://api.spotify.com/v1/me/top/tracks?limit=5',
      {
        headers: {
          'Authorization': 'Bearer ' + accessToken,
        },
      }
    );
    res.json(data);
  } catch (error) {
    console.error('Error fetching top tracks:', error.response?.data || error.message);
    res.status(500).json({ error: error.message });
  }
});

// ------------------------
// ✅ ROOT ENDPOINT - HEALTH CHECK
// ------------------------
app.get('/', (req, res) => {
  res.send('✅ Spotify Proxy Server is up and running!');
});

// ------------------------
// ✅ SINGLE SERVER LISTEN
// ------------------------
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`✅ Server listening on port ${PORT}`);
});
